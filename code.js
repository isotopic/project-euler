/**
* Isotopic - Soluções abstraídas para as questões do projeto euler
* https://projecteuler.net
*/

console.log('\033c');


/*

Scape sequences para terminal coloridinho

*/
GREEN_BOLD="\033[1;32m";
YELLOW="\033[0;33m";
YELLOW_BOLD="\033[0;33m";
MAGENTA="\033[0;35m";
MAGENTA_BOLD="\033[1;35m";
CYAN="\033[0;36m";
CYAN_BOLD="\033[1;36m";
WHITE="\033[0;37m";
WHITE_BOLD="\033[1;37m";
RED="\033[0;31m";
RED_BOLD="\033[1;31m";
BOLD="\033[1;0m";
RESET="\033[0m";



/*

As funções são referenciadas em solutions[] para que sejam acessadas interativamente pelo terminal.
São inseridos além da função, o id, descrição e valor pedido pela questão correspondente no projeto euler.

*/
var solutions = [];

function addSolution(id, func, asked, desc){
	solutions[id] = {
		func: func,
		name: func.name,
		params: functionParams(func),
		asked: asked,
		desc: desc
	}
}

var STRIP_COMMENTS = /((\/\/.*$)|(\/\*[\s\S]*?\*\/))/mg;
var ARGUMENT_NAMES = /([^\s,]+)/g;
function functionParams(func) {
  var fnStr = func.toString().replace(STRIP_COMMENTS, '');
  var result = fnStr.slice(fnStr.indexOf('(')+1, fnStr.indexOf(')')).match(ARGUMENT_NAMES);
  if(result === null)
     result = [];
  return result;
}

















/*

[PROBLEM 1]

If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
Find the sum of all the multiples of 3 or 5 below 1000.


SOLUÇÃO

Itera pelos números naturais sucessivamente até o limite n pedido (1000), adicionando a (sum) os valores que forem múltiplos de 3 e 5.

*/
function sum_of_multiples_3_and_5_below(n){
	var sum = 0;
	for(var a=0; a<n; a++){
		if( a%3==0 || a%5==0 ){
			sum+=a;
		}
	}
	return sum;
}

addSolution(1, sum_of_multiples_3_and_5_below, 1000, 'Obter a soma dos múltiplos de 3 e 5 menores que '+GREEN_BOLD+'n'+RESET+'.');







/*

[PROBLEM 2]

Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.


SOLUÇÃO

Cria a sequência fibonacci até o limite n pedido (4000000). Cada valor da sequência (next) é composto pela soma (ultimate + penultimate).
Em cada iteração, se o número fibonacci (next) é par, incrementa (sum).

*/
function sum_of_even_fibonaccis_smaller_than(n){
	var penultimate = 0;
	var ultimate = 1;
	var next = 0;
	var sum = 0;
	while(next<n){
		if(next%2==0) sum+=next;
		next = ultimate + penultimate;
		penultimate = ultimate;
		ultimate = next;
	}
	return sum;
}

addSolution(2, sum_of_even_fibonaccis_smaller_than, 4000000, 'Obter a soma dos elementos pares da sequência fibonacci menores que '+GREEN_BOLD+'n'+RESET+'.');







/*

[PROBLEM 3]

The prime factors of 13195 are 5, 7, 13 and 29.
What is the largest prime factor of the number 600851475143 ?


SOLUÇÃO

Sucessivamente tenta dividir (n) por números primos (p).
Quando é divisível, adiciona o fator primo (p) ao array factors.
(n) permanece constante para limitar os fatores primos possíveis.
(nn) é a cópia de (n) que vai sendo dividida até chegar a 2 (menor fator primo)

*/
function prime_factors(n){
	var factors = [];
	var nn=n;
	for(var p=2; p<=n; p++){
		if(nn%p==0){
			factors.push(p);
			nn=(nn/p);
			p=2;
		}
		if(nn<=2) return factors;
	}
}

addSolution(3, prime_factors, 600851475143, 'Obter o maior fator primo do número '+GREEN_BOLD+'n'+RESET+'.');








/*

[PROBLEM 4]

A palindromic number reads the same both ways.
The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99.
Find the largest palindrome made from the product of two 3-digit numbers.


SOLUÇÃO

Encontra-se o maior fator possível (max_factor) com os dígitos fornecidos (se 2 dígitos 99, se 3 dígitos 999).
Encontra-se o menor fator possível (min_factor) com os dígitos fornecidos (se 2 dígitos 10, se 3 dígitos 100).
Sucessivamente multiplica-se um pelo outro pelas combinações possíveis.


*/
function biggest_palindrome_product_of_two_numbers_with(n){

	if(n>3){
		return 'Resolução ainda não foi otimizada para n > 3.';
	}

	var max_factor = Math.pow(10,n)-1;
	var min_factor = Math.pow(10,n-1);

	var biggest = 0;
	for(var a=max_factor; a>=min_factor; a--){

		for(var b=max_factor; b>=min_factor; b--){
			prod = a*b;
			if(prod.toString().split("").reverse("").join("") == prod){
				if(prod > biggest){
					biggest = prod;
				}			
			}
		}

	}
	return biggest;

}

addSolution(4, biggest_palindrome_product_of_two_numbers_with, 3, 'Obter o maior palíndromo formado pelo produto de dois números de '+GREEN_BOLD+'n'+RESET+' dígitos.'); 






/*
var res = biggest_palindrome_product_of_two_numbers_with(3);
console.log(res);
process.exit();
*/












/*

CLI

Interface da linha de comando para exibir as soluções interativamente e permitir executá-las com outros parâmetros além do perguntado.

*/




var readline = require('readline');
var rl;


function getSolved(){
	var solved = [];
	for(var a=0; a<solutions.length; a++){
		if(solutions[a]!=null){
			solved.push(a);
		};
	}
	return solved;
}



function startCLI(){
	banner = WHITE;
	banner += "---------------------------------------------------\n";
	banner += ",--.                ,--.                ,--.       \n";
	banner += "|  | ,---.  ,---. ,-'  '-. ,---.  ,---. `--' ,---. \n";
	banner += "|  |(  .-' | .-. |'-.  .-'| .-. || .-. |,--.| .--' \n";
	banner += "|  |.-'  `)' '-' '  |  |  ' '-' '| '-' '|  |\ `--. \n";
	banner += "`--'`----'  `---'   `--'   `---' |  |-' `--' `---' \n";
	banner += "                                 `--'              \n";
	banner += "                 Abstracted Project Euler solutions\n";
	banner += "---------------------------------------------------\n";
	//banner += "\n";
	//banner += "\n";

    console.log(banner);

    var solved = getSolved();
    console.log('\nResoluções disponíveis até o momento: '+WHITE_BOLD+'['+solved.join(', ')+ ']'+RESET+'\n');
	
	rl = readline.createInterface({
	  input: process.stdin,
	  output: process.stdout
	});

	chooseProblem();
}




function chooseProblem(){
	rl.question('\n  >  Digite um dos ids disponíveis, ou x para sair: ', function(id) {
		if(id=='x'||id=='X'){
			console.log('');
			rl.close();
			return;
		}
		if(!isNaN(id) && solutions[id]!=null){
			chooseParams(id);
		}else{
			console.log(WHITE+'\nSolução não encontrada.'+RESET);
			chooseProblem();
		}
	});
}





function chooseParams(id){
	console.log('\n'+WHITE+'https://projecteuler.net/problem='+id+'\n\n'+solutions[id].desc+RESET+'\n');
	if(solutions[id].params.length==0){
		solveProblem(id);
	}else{
		rl.question('\n  >  Digite o parâmetro '+WHITE_BOLD+solutions[id].params[0]+RESET+' (a questão pede '+solutions[id].params[0]+' = '+solutions[id].asked+'): ', function(param) {
			solveProblem(id, param);
		});
	}

}




function solveProblem(id, param){
	var response = "";
	if(!param){
		response = solutions[id].func();
	}else{
		response = solutions[id].func(param);
	}
	console.log('\n\n'+WHITE_BOLD+response+RESET+'\n');
	chooseProblem();
}










startCLI();




















